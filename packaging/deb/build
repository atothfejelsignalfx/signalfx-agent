#!/bin/bash

# Makes the Debian deb package and optionally adds it to the public repository.
# First builds the debian packager Docker image (which extends and includes the
# agent bundle) and then runs "debuild" which does the heavy lifting of
# actually building the deb package.

set -exuo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. $SCRIPT_DIR/../../scripts/common.sh

REPO_STAGE=${1:-test}
AGENT_VERSION=$($SCRIPT_DIR/../../scripts/latest-version)
DEB_REVISION=${DEB_REVISION:-$($SCRIPT_DIR/current-revision ${AGENT_VERSION})}
GPG_DIR=${GPG_DIR:-"$HOME/.gnupg"}

image_name=signalfx-agent-debian-packager
image_tag=${AGENT_VERSION}-deb${DEB_REVISION}

do_docker_build ${image_name} ${image_tag} debian-packager $AGENT_VERSION

OUTPUT_DIR=${OUTPUT_DIR:-$SCRIPT_DIR/output}

create_deb() {
  output_prefix="$OUTPUT_DIR/signalfx-agent_$AGENT_VERSION-${DEB_REVISION}_amd64"

  find $OUTPUT_DIR -type f | xargs rm || true 

  docker run --rm \
    -v ${SCRIPT_DIR}/../../.git:/git-repo:ro \
    -v ${OUTPUT_DIR}:/output \
    $image_name:$image_tag \
    bash -e -c \
      "./make-changelog && debuild -us -uc && cp -f ../*.{changes,build,buildinfo,deb} /output"

  if ! test -e $output_prefix.deb
  then
    echo "Could not find output package, something went wrong" >&2
    exit 1
  fi

  echo "SignalFx Agent ${AGENT_VERSION}-${DEB_REVISION} built successfully.  Output is in ${OUTPUT_DIR}."
}

push_to_repo() {
  docker run --rm \
    -v $HOME/.gnupg:/root/.gnupg \
    -v $HOME/.aws:/root/.aws \
    -v ${OUTPUT_DIR}:/output \
    -v /tmp/signalfx-agent-deb-cache:/repo \
    -it \
    $image_name:$image_tag \
    bash -e -c "./add-output-to-repo $REPO_STAGE"
}

if [[ ${BUILD_DEB-yes} == "yes" ]]; then
  create_deb
fi

if [[ -n ${PUSH_TO_REPO-} ]]; then
  push_to_repo
fi
