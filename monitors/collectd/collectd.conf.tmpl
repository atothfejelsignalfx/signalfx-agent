BaseDir "."
PIDFile "./run/pid"
TypesDB "./plugins/collectd/types.db"
PluginDir "./plugins/collectd"

{{if .Hostname}}
Hostname "{{.Hostname}}"
FQDNLookup false
{{else}}
FQDNLookup true
{{end}}
Interval {{ .IntervalSeconds }}
Timeout {{ .Timeout }}
ReadThreads {{ .ReadThreads }}
WriteQueueLimitHigh {{ .WriteQueueLimitHigh }}
WriteQueueLimitLow  {{ .WriteQueueLimitLow }}
CollectInternalStats {{ .CollectInternalStats }}

LoadPlugin logfile

<Plugin logfile>
  LogLevel "{{.LogLevel}}"
  Timestamp true
  PrintSeverity true
</Plugin>

LoadPlugin cpu
{{if eq Globals.Platform "linux"}}
LoadPlugin cpufreq
{{end}}
LoadPlugin df
<Plugin "df">
  ChangeRoot "./hostfs"
  IgnoreSelected true
  FSType "overlay"
  FSType "tmpfs"
  FSType "proc"
  FSType "sysfs"
  FSType "nsfs"
  FSType "cgroup"
  FSType "devpts"
  FSType "selinuxfs"
  FSType "devtmpfs"
  FSType "debugfs"
  FSType "mqueue"
  FSType "hugetlbfs"
  FSType "securityfs"
  FSType "pstore"
  FSType "binfmt_misc"
  FSType "autofs"
  MountPoint "/^/hostfs/var/lib/rkt/pods/"
  MountPoint "/^/hostfs/net//"
  MountPoint "/^/hostfs/smb//"
</Plugin>

LoadPlugin disk
<Plugin "disk">
  Disk "/^loop\d+$/"
  Disk "/^dm-\d+$/"
  IgnoreSelected "true"
</Plugin>

LoadPlugin interface
<Plugin "interface">
  Interface "/^lo\d*$/"
  Interface "/^docker.*/"
  Interface "/^t(un|ap)\d*$/"
  Interface "/^veth.*$/"
  IgnoreSelected "true"
</Plugin>

LoadPlugin load
LoadPlugin memory

{{if eq Globals.Platform "linux"}}
LoadPlugin protocols
<Plugin "protocols">
  Value "Icmp:InDestUnreachs"
  Value "Tcp:CurrEstab"
  Value "Tcp:OutSegs"
  Value "Tcp:RetransSegs"
  Value "TcpExt:DelayedACKs"
  Value "/Tcp:.*Opens/"
  Value "/^TcpExt:.*Octets/"
  IgnoreSelected false
</Plugin>
{{end}}

LoadPlugin vmem
<Plugin vmem>
  Verbose false
</Plugin>

LoadPlugin uptime

LoadPlugin aggregation

<Plugin "aggregation">
  <Aggregation>
    Plugin "cpu"
    Type "cpu"

    GroupBy "Host"
    GroupBy "TypeInstance"

    CalculateSum true
    CalculateAverage true
  </Aggregation>
</Plugin>

LoadPlugin match_regex

LoadPlugin processes
<Plugin "processes">
  Process "collectd"
  Process "signalfx-agent"
</Plugin>

<Chain "PostCache">
  <Rule>
    <Match regex>
      Plugin "^cpu$"
    </Match>
    <Target write>
      Plugin "aggregation"
      Plugin "python.signalfx_metadata"
    </Target>
    Target stop
  </Rule>
  <Rule "FilterOutExcessiveVmemData">
    <Match "regex">
      Plugin '^vmem$'
    </Match>
    <Target "jump">
      Chain "VmemFilters"
    </Target>
  </Rule>

  Target write
</Chain>

<Chain "VmemFilters">
  <Rule "vmem_filtering_accept_whitelisted_vmpage_faults">
    <Match "regex">
      Type 'vmpage_faults'
    </Match>
    Target "return"
  </Rule>

  <Rule "vmem_filtering_accept_whitelisted_vmpage_io">
    <Match "regex">
      Type 'vmpage_io'
    </Match>
    Target "return"
  </Rule>

  <Rule "vmem_filtering_accept_whitelisted_vmpage_number_free_pages">
    <Match "regex">
      Type 'vmpage_number'
      TypeInstance 'free_pages'
    </Match>
  Target "return"
  </Rule>

  <Rule "vmem_filtering_accept_whitelisted_vmpage_number_mapped">
    <Match "regex">
      Type 'vmpage_number'
      TypeInstance 'mapped'
    </Match>
    Target "return"
  </Rule>

  Target "stop"
</Chain>

<LoadPlugin "write_http">
   FlushInterval 10
</LoadPlugin>
<Plugin "write_http">
  <Node "SignalFx">
    URL "{{.WriteServerURL}}"
    Format "JSON"
    Timeout 9000
    BufferSize 65536
    LogHttpError true
  </Node>
</Plugin>

{{if .HasGenericJMXMonitor}}
TypesDB "{{Globals.PluginRoot}}/java/signalfx_types_db"
LoadPlugin "java"

<Plugin java>
  #JVMArg "-verbose:jni"
  JVMArg "-Djava.class.path={{Globals.PluginRoot}}/java/collectd-api.jar:{{Globals.PluginRoot}}/java/generic-jmx.jar"

  LoadPlugin "org.collectd.java.GenericJMX"
</Plugin>
{{end}}

Include "./tmp/managed_config/*.conf"
