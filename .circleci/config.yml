version: 2
references:
  executor: &executor
    machine:
      image: circleci/classic:201711-01

  attach_workspace: &attach_workspace
    attach_workspace:
      at: /tmp/workspace

  import_image: &import_image
    run: |
      docker load -i /tmp/workspace/image.tar

  import_final_image: &import_final_image
    run: |
      docker load -i /tmp/workspace/final_image.tar

  run_k8s_integration_tests: &run_k8s_integration_tests
    run:
      no_output_timeout: 30m
      command: |
        set -x
        mkdir ~/testresults
        docker images
        docker run --rm --net host -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/scratch:/tmp/scratch -v ~/testresults:/output signalfx-agent-dev pytest --verbose --junitxml=/output/integration_tests.xml --html=/output/k8s_integration_tests.html --self-contained-html -m "k8s" --k8s-versions=$(eval "echo -n $K8S_VERSION") --k8s-timeout=600 --k8s-agent-name=quay.io/signalfx/signalfx-agent-dev --k8s-agent-tag=k8s-test --k8s-metrics-timeout=600 tests

jobs:
  build:
    <<: *executor
    steps:
     - checkout
     - run: |
         set -x
         export PULL_CACHE=yes
         source scripts/common.sh
         do_docker_build signalfx-agent-dev latest dev-extras
     - run: |
         set -x
         export PULL_CACHE=yes
         export AGENT_VERSION=k8s-test
         ./scripts/build
     - run: |
         mkdir -p /tmp/workspace
         docker save -o /tmp/workspace/image.tar signalfx-agent-dev:latest
         docker save -o /tmp/workspace/final_image.tar quay.io/signalfx/signalfx-agent-dev:k8s-test
     - persist_to_workspace:
         root: /tmp/workspace
         paths:
           - image.tar
           - final_image.tar

  lint: 
    <<: *executor
    steps:
      - *attach_workspace
      - *import_image
      - run: docker run --rm signalfx-agent-dev make lint

  vet: 
    <<: *executor
    steps:
      - *attach_workspace
      - *import_image
      - run: docker run --rm signalfx-agent-dev make vet

  gotests: 
    <<: *executor
    steps:
      - *attach_workspace
      - *import_image
      - run: |
          mkdir ~/testresults
          docker run --rm \
            -v ~/testresults:/output \
            signalfx-agent-dev \
            bash -eo pipefail -c "make templates && go test -v ./... | go2xunit > /output/unit.xml"

      - store_test_results:
          path: ~/testresults

  docs_test: 
    <<: *executor
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - run: |
          docker run --rm \
            -v $(eval "echo -n $CIRCLE_WORKING_DIRECTORY")/.git:/go/src/github.com/signalfx/signalfx-agent/.git \
            signalfx-agent-dev \
            bash -ec "make docs && git diff --exit-code" || \
            (echo 'Docs are not updated in the repo! Run `make docs` in the dev image and commit those changes.' && exit 1)

  integration_tests: 
    <<: *executor
    steps:
      - *attach_workspace
      - *import_image
      - run: |
          mkdir ~/testresults

          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ~/testresults:/output signalfx-agent-dev pytest -n8 --junitxml=/output/integration_tests.xml -m "not packaging and not installer and not k8s" tests

      - store_test_results:
          path: ~/testresults

  k8s_integration_tests:
    <<: *executor
    steps:
      - checkout
      - run:
          no_output_timeout: 30m
          command: |
            set -x
            mkdir ~/testresults
            docker build -t minikube:latest test-services/minikube
            docker run -d --rm --privileged -p 8443 -p 2375 -v /tmp/scratch:/tmp/scratch --name minikube minikube
            docker run --rm -v $(pwd):/go/src/github.com/signalfx/signalfx-agent:cached -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/scratch:/tmp/scratch -v ~/testresults:/output quay.io/signalfx/signalfx-agent-dev:stage-dev-extras bash -ec "pip3 install -r tests/requirements.txt && pytest --verbose --junitxml=/output/integration_tests.xml --html=/output/k8s_integration_tests.html --self-contained-html -m k8s --k8s-timeout=300 --k8s-agent-name=quay.io/signalfx/signalfx-agent --k8s-agent-tag=3.1.2 --k8s-metrics-timeout=600 --k8s-container=minikube -s tests"
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.9.4_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.9.4"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.9.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.9.0"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.8.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.8.0"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.7.5_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.7.5"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.7.4_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.7.4"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.7.3_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.7.3"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.7.2_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.7.2"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.7.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.7.0"
    steps:
      - *attach_workspace
      - *import_image
      - *import_final_image
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  rpm_package_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults

          if ! scripts/changes-include-dir packaging/rpm; then
              echo "RPM packaging code has not changed, skipping tests!"
              exit 0
          fi

          sudo apt-get update && sudo apt-get install -y python3-pip
          sudo pip3 install -r tests/requirements.txt

          export PULL_CACHE=yes
          ./packaging/rpm/build

          mkdir /tmp/scratch

          pytest -n auto -m "rpm" --junitxml=~/testresults/rpm.xml ./tests/packaging

      - store_test_results:
          path: ~/testresults

      - store_artifacts:
          path: ~/project/packaging/rpm/output
          destination: /packages/

  deb_package_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults

          if ! scripts/changes-include-dir packaging/deb; then
              echo "Debian packaging code has not changed, skipping tests!"
              exit 0
          fi

          sudo apt-get update && sudo apt-get install -y python3-pip
          sudo pip3 install -r tests/requirements.txt

          export PULL_CACHE=yes
          ./packaging/deb/build

          mkdir /tmp/scratch

          pytest -n auto -m "deb" --junitxml=~/testresults/deb.xml ./tests/packaging

      - store_test_results:
          path: ~/testresults

      - store_artifacts:
          path: ~/project/packaging/deb/output
          destination: /packages/

  chef_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults

          if ! scripts/changes-include-dir deployments/chef; then
              echo "Chef cookbook code has not changed, skipping tests!"
              exit 0
          fi

          cd deployments/chef
          make dev-image
          docker run --rm \
            signalfx-agent-chef-dev \
            chef exec rspec --format RspecJunitFormatter > ~/testresults/chefspec.xml

          docker run --rm \
            signalfx-agent-chef-dev \
            foodcritic .

      - store_test_results:
          path: ~/testresults

  puppet_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults

          if ! scripts/changes-include-dir deployments/puppet; then
              echo "Puppet module code has not changed, skipping tests!"
              exit 0
          fi

          cd deployments/puppet
          make dev-image
          docker run --rm \
            signalfx-agent-puppet-dev \
            rspec spec --format RspecJunitFormatter > ~/testresults/puppetspec.xml

          docker run --rm \
            signalfx-agent-puppet-dev \
            puppet-lint .

      - store_test_results:
          path: ~/testresults

  salt_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults

          if ! scripts/changes-include-dir deployments/salt; then
              echo "Salt module code has not changed, skipping tests!"
              exit 0
          fi

          cd deployments/salt
          make dev-image
          docker run --rm \
          signalfx-agent-salt-dev salt '*' state.apply > ~/testresults/salt.out


      - store_test_results:
          path: ~/testresults

  ansible_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults

          if ! scripts/changes-include-dir deployments/ansible; then
              echo "Ansible playbook code has not changed, skipping tests!"
              exit 0
          fi

          cd deployments/ansible
          make dev-image
          docker run --rm \
            signalfx-agent-ansible-dev \
            ansible-playbook -i inventory example-playbook.yml --connection=local > ~/testresults/ansible.out

          docker run --rm \
            signalfx-agent-ansible-dev \
            ansible-lint .

      - store_test_results:
          path: ~/testresults

workflows:
  version: 2
  build_test:
    jobs:
     - build
     - lint:
        requires:
         - build
     - vet:
        requires:
         - build
     - gotests:
        requires:
         - build
     - integration_tests:
        requires:
         - build
     - k8s_v1.9.4_integration_tests:
        requires:
         - build
     - k8s_v1.9.0_integration_tests:
        requires:
         - build
     - k8s_v1.8.0_integration_tests:
        requires:
         - build
     - k8s_v1.7.5_integration_tests:
        requires:
         - build
     - k8s_v1.7.4_integration_tests:
        requires:
         - build
     - k8s_v1.7.3_integration_tests:
        requires:
         - build
     - k8s_v1.7.2_integration_tests:
        requires:
         - build
     - k8s_v1.7.0_integration_tests:
        requires:
         - build
     - docs_test:
        requires:
         - build
     - rpm_package_tests
     - deb_package_tests
     - chef_tests
     - puppet_tests
     - salt_tests
     - ansible_tests
     - k8s_integration_tests
